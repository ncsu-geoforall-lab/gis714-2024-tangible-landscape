#!/usr/bin/env python3
##############################################################################
# AUTHOR(S):    Qasim Adegbite
##############################################################################
import os
import grass.script as gs


def run_flood_simulation(elevation, dx, dy, env, **kwargs):
    # Calculate slope and aspect
    gs.run_command("r.slope.aspect", elevation=elevation, dx=dx, dy=dy, env=env)
    """Run flood simulation at a specific depth."""
    gs.run_command(
        "r.sim.water",
        elevation=elevation,
        dx=dx,
        dy=dy,
        rain_value=50,
        infil_value=0,
        man_value=0.05,
        depth="water_depth_1",
        discharge="water_discharge_1",
        nwalk=100000,
        niterations=30,
        output_step=4,
        flags="t",
        env=env,
    )


def run_social_vulnerability_index(env, **kwargs):
    # Run computation of social vulnerability index.
    # Check flood depth greater than 0.1 and social vulnerability index greater than 0.1
    gs.run_command(
        "r.mapcalc",
        expression=(
            "flooded_area = if(water_depth_1 > 0.1 && cfactorbare_1m > 0.1, 1, null())"
        ),
        env=env,
    )


def main():
    # No need to edit this block. It should stay the same.
    # Get the current environment variables as a copy.
    env = os.environ.copy()
    # We want to run this repetitively and replace the old data by the new data.
    env["GRASS_OVERWRITE"] = "1"
    elevation = "elev_lid792_1m"
    dx = "dx_walnut"  # Define or pass these variables
    dy = "dy_walnut"  # Define or pass these variables
    elev_resampled = "elev_resampled"
    # We use resampling to get a similar resolution as with Tangible Landscape.
    gs.run_command("g.region", raster=elevation, res=4, flags="a", env=env)
    gs.run_command("r.resamp.stats", input=elevation, output=elev_resampled, env=env)
    # The end of the block which needs no editing.
    # Edit here:
    # Place your function call or calls here.
    # This will run flood simulation and compute social vulnerability index for the specified flood depth.
    run_flood_simulation(elevation=elev_resampled, dx=dx, dy=dy, env=env)
    run_social_vulnerability_index(env=env)


if __name__ == "__main__":
    main()
