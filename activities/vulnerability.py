#!/usr/bin/env python3

##############################################################################
# AUTHOR(S):    Qasim Adegbite
##############################################################################

# vulnerability.py

"""
Instructions

- Functions intended to run for each scan
  need to start with `run_`, e.g., `run_slope`.

- Do not modify the parameters of the `run_` function
  unless you know what you are doing.
  See optional parameters at:
  https://github.com/tangible-landscape/grass-tangible-landscape/wiki/Running-analyses-and-developing-workflows#python-workflows

- All gs.run_command/read_command/write_command/parse_command
  need to be passed *env* parameter like this: `(..., env=env)`.
"""
import os
import grass.script as gs



def run_flood_simulation(elevation, env, **kwargs):
 # Calculate slope and aspect
    gs.run_command("r.slope.aspect", elevation=Elevation_10m, dx=dx_walnut, dy=dy_walnut, env=env)
    
    """Run flood simulation at a specific depth."""
    gs.run_command(
        "r.sim.water",
        elevation=elevation,
        dx="dx_walnut",
        dy="dy_walnut", 
        rain_value=50,
        infil_value=0,
        man_value=0.05,
        depth="water_depth_1",
        discharge="water_discharge_1",
        nwalk=100000,
        niterations=30,
        output_step=4,
        flags="t",
        env=env,
    )


def run_social_vulnerability_index(env, **kwargs):
    """Run computation of social vulnerability index."""
    # Check flood depth greater than 0.1 and social vulnerability index greater than 0.1
    gs.run_command(
        "r.mapcalc",
        expression="flooded_area = if(water_depth > 0.1 && cfactorbare_1m > 0.1, 1, null())",
        env=env,
    )


def main():
    """Function which runs when testing without Tangible Landscape"""

    # No need to edit this block. It should stay the same.
    # Get the current environment variables as a copy.
    env = os.environ.copy()
    # We want to run this repetitively and replace the old data by the new data.
    env["GRASS_OVERWRITE"] = "1"
    elevation = "elev_lid792_1m"
    elev_resampled = "elev_resampled"
    # We use resampling to get a similar resolution as with Tangible Landscape.
    gs.run_command("g.region", raster=elevation, res=4, flags="a", env=env)
    gs.run_command("r.resamp.stats", input=elevation, output=elev_resampled, env=env)
    # The end of the block which needs no editing.

    # Edit here:
    # Place your function call or calls here.
    # This will run flood simulation and compute social vulnerability index for the specified flood depth.
    run_flood_simulation(elevation=elev_resampled, env=env)
    run_social_vulnerability_index(env=env)


if __name__ == "__main__":
    main()
